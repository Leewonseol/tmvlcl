# 필요한 라이브러리 로드
library(dplyr)
library(ggplot2)

# --- 1. 최종 모델 설정 ---

# 시뮬레이션 기본 정보
n_simulations <- 100000
n_competitors <- 13
positions <- 5

# [수정] 최종 동점자 경쟁 시, 학점으로 인한 100% 페널티 적용
# 즉, 동점자 경쟁 상황에서 나의 선발 확률은 0%가 됨
gpa_penalty_factor <- 0.0

# 각 세부항목별 능력치 분포(베타 분포) 파라미터 설정
skill_distributions <- list(
  # 이름, alpha, beta
  pass_1_1 = c(2, 3),   # 맞춤형 관심: 약간 어려움
  pass_1_2 = c(4, 2),   # 논리적 연결성: 비교적 쉬움
  pass_1_3 = c(1.5, 4), # 정보 탐색: 어려움
  pass_2_1 = c(2, 4),   # 압박 검증 대응: 어려움
  pass_2_2 = c(1.5, 6), # 적용 및 확장: 매우 어려움
  pass_2_3 = c(2, 2.5)  # 메타인지: 중간보다 약간 어려움
)

# --- 2. 몬테카를로 시뮬레이션 실행 ---
your_prob_results <- numeric(n_simulations)
pb <- txtProgressBar(min = 0, max = n_simulations, style = 3)

for (i in 1:n_simulations) {
  
  competitor_survivors_count <- 0
  
  for (j in 1:n_competitors) {
    
    # 이번 경쟁자의 고유한 능력치(성공 확률)를 분포에 따라 생성
    current_probs <- sapply(skill_distributions, function(params) {
      rbeta(1, shape1 = params[1], shape2 = params[2])
    })
    
    # --- 관문 1 평가 (통과 기준: 3개 중 2개 이상 성공) ---
    g1_outcomes <- rbinom(3, 1, prob = current_probs[1:3])
    passed_g1 <- sum(g1_outcomes) >= 2
    if (!passed_g1) next
    
    # --- 관문 2 평가 (통과 기준: 핵심(2-1) 성공 AND 추가(2-2, 2-3) 중 1개 이상 성공) ---
    passed_g2_core <- rbinom(1, 1, prob = current_probs[4]) == 1
    additional_outcomes <- rbinom(2, 1, prob = current_probs[5:6])
    passed_g2_additional <- sum(additional_outcomes) >= 1
    if (!(passed_g2_core && passed_g2_additional)) next
    
    competitor_survivors_count <- competitor_survivors_count + 1
  }
  
  total_survivors <- 1 + competitor_survivors_count
  
  # --- 최종 관문: 학점(GPA) 필터 적용 ---
  if (total_survivors <= positions) {
    # 생존자 수가 TO와 같거나 적으면, 경쟁이 없으므로 합격
    your_prob_results[i] <- 1.0  
  } else {
    # 생존자 수가 TO를 초과하면 '경쟁' 발생.
    # 하지만 gpa_penalty_factor가 0이므로, 나의 합격 확률은 0이 됨.
    fair_chance <- positions / total_survivors
    your_prob_results[i] <- fair_chance * gpa_penalty_factor # 이 값은 0이 됩니다.
  }
  
  setTxtProgressBar(pb, i)
}
close(pb)

# --- 3. 최종 결과 분석 및 출력 ---
final_avg_probability <- mean(your_prob_results)
cat("\n--- 최종 시뮬레이션 결과 (가장 가혹한 페널티 적용) ---\n")
cat("총", n_simulations, "번의 가상 면접 시뮬레이션 결과...\n\n")
cat("귀하의 최종 합격 확률(기댓값):", round(final_avg_probability * 100, 2), "%\n")


# --- 4. 시뮬레이션 결과 시각화 ---
results_df <- data.frame(Probability = your_prob_results)

ggplot(results_df, aes(x = Probability)) +
  geom_histogram(aes(y = ..density..), breaks = seq(-0.1, 1.1, 0.2), fill = "#d90429", color = "white", boundary = 0) +
  labs(
    title = "가장 가혹한 페널티 시나리오의 합격 확률 분포",
    subtitle = paste0("최종 합격 확률은 평균 ", round(final_avg_probability * 100, 1), "%"),
    x = "시뮬레이션별 합격 확률 (0% 또는 100%)",
    y = "빈도"
  ) +
  scale_x_continuous(labels = scales::percent_format(accuracy = 1), limits = c(-0.1, 1.1)) +
  theme_minimal(base_family = "Malgun Gothic") +
  theme(
    plot.title = element_text(size=20, face="bold"),
    plot.subtitle = element_text(size=14)
  )
